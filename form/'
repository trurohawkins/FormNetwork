Action *makeAction(char *name, void (*n_fun)(Actor*), void *n_vars) {
	Action *newAction = (Action*)calloc(1, sizeof(Action));
	newAction->name = calloc(strlen(name) + 1, 1);
	memcpy(newAction->name, name, strlen(name)+1);
	newAction->active = 1;
	if (n_fun == 0) {
		newAction->fun = &defaultAction;
	} else {
		newAction->fun = n_fun;
	}
	newAction->vars = n_vars;
	return newAction;
}

void deleteAction(Action *action) {
	free(action->name);
	free(action->vars);
	//free(action);//changed because part of list and deleting that list will fre this memory
}

void defaultAction(Form *a) {
	printf("I(%i) am acting %i \n", a->id, a->id);
}

Actor *makeActor(Form * f/*, Action *a*/) {
	Actor *newActor = (Actor*)calloc(1, sizeof(Actor));
	newActor->body = f;
	newActor->actionList = makeList();
	/*
	if (a != 0) {
		addToList(newActor->actionList, a);
	}
	*/
	return newActor;
}


void addAction(Actor *actor, Action *action) {
	addToList(&(actor->actionList), action);
}

Action *findAction(Actor *actor, char *name) {
	return cmpList(&actor->actionList, name, cmpNames);
}

bool cmpNames(void *action1, void * action2) {
	memcmp((Action*)action1->name, (Action*)action2->name) == 0;
}

void *removeAction(Actor *actor, Action *action) {
	return removeFromList(&(actor->actionList), action);
}

void deleteMyAction(Actor *actor, Action *action) {
	deleteAction(removeAction(actor, action));
}

void doActions(Actor *actor) {
	linkedList *a = actor->actionList;
	while (a != 0) {
		Action *act = (Action*) a->data;
		if (act->active == 1) {
			(*(act->fun))(actor->body, act);
		}
		a = a->next;
	}
}

void freeActionList(Actor *actor) {
	linkedList *a = actor->actionList;
	while (a != 0) {
		deleteAction((Action*)a->data);
		a = a->next;
	}
	freeList(&(actor->actionList));

}

void deleteActor(Actor *actor) {
	if (actor->body != NULL) {
		if (checkFormIsSolid(actor->body)) {
			//if form is not solid(it has a body larger than 1 Cell), then its easier if the actor takes care of it, t oprevent cyclical calls involving removing the different parts when deleting world
			removeForm(actor->body);
			deleteForm(actor->body);
		}
	}
	freeActionList(actor);
	//free(actor);
}
#include "ActorList.c"
//#include "PoopGuy.c"
